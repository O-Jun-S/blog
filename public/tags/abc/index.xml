<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ABC on Ojun</title>
    <link>/tags/abc/</link>
    <description>Recent content in ABC on Ojun</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 25 Jul 2022 17:37:09 +0900</lastBuildDate><atom:link href="/tags/abc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ABC261 D</title>
      <link>/posts/tech/2022/7_25/abc261_d/</link>
      <pubDate>Mon, 25 Jul 2022 17:37:09 +0900</pubDate>
      
      <guid>/posts/tech/2022/7_25/abc261_d/</guid>
      <description>問題文 問題のリンク
N回のコイントスを行って、表が出たらお金がもらえます。 しかし、表を出し続ければよいというわけではありません。 この問題を難しくしているのが、連続で表を出すことによるボーナスです。 なぜなら、例えば「2回連続表が出た場合」のボーナスがとても高い場合を考えます。 このとき、10回連続表を出すよりも、裏を出してリセットし、先ほどのボーナスを取り続けたほうが儲かるかもしれません。 コイントスを行って得たお金の最大値を求めるのがこの問題です。
解法 結論から言うと、解法はdp(動的計画法、Dynamic Programming)です。 dpの特徴は、「前の計算結果を利用して次の結果を出す」ことです。 dpについて知らない方は、この記事を見ると分かりやすいかもしれないです。 dpを使うという判断の理由は、
 前の計算からの結果が利用できそうである。 最適な行動をした場合の最大値を求める問題である。  などです。
さて、dpと言えば、考えるのはdpテーブルです。僕は以下のように定義しました。 $$ dp[i][j] = i番目のコイントスで、連続でj回表になっているとき、得られるお金の最大値。 $$ ただし、iは1-indexed。
次に考えるべきは、初期値と漸化式です。僕は次のように設定しました。
 初期値 $dp[0][0] = 0$ 表が出た場合 $dp[i+1][j+1] = \max(dp[i+1][j+1], dp[i][j] + X[i] + bonus[j+1])$ 裏が出た場合 $dp[i+1][0] = \max(dp[i+1][0], dp[i][j])$  ただし、bonus[j]は、j回連続表が出た時のボーナス(ボーナスが出ない時は0)。
答えは、次のように選べばよいです。 $$ ans = \max_{0 \le j \le n}(dp[n][j]) $$
よって、$O(N^2)$でこの問題が解けました。 $1 \le n \le 5000$より、十分間に合います。
僕が提出したコードは以下です。
#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std; #define rep(i, n) for(int i=0; i &amp;lt; (n); i++) using ll = long long; template&amp;lt;class T&amp;gt; inline bool chmax(T&amp;amp; a, T b) { if (a &amp;lt; b) { a = b; return 1; } return 0; } template&amp;lt;class T&amp;gt; inline bool chmin(T&amp;amp; a, T b) { if (a &amp;gt; b) { a = b; return 1; } return 0; } int main(void) { int n, m; cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m; vector&amp;lt;int&amp;gt; x(n); rep(i, n) cin &amp;gt;&amp;gt; x[i]; vector&amp;lt;vector&amp;lt;ll&amp;gt;&amp;gt; dp(5500, vector&amp;lt;ll&amp;gt;(5500, -1)); map&amp;lt;ll, ll&amp;gt; bonus; rep(i, m) { ll ci, yi; cin &amp;gt;&amp;gt; ci &amp;gt;&amp;gt; yi; bonus[ci] = yi; } dp[0][0] = 0; rep(i, n) { rep(j, 5500) { if(dp[i][j] == -1) continue; chmax(dp[i + 1][0], dp[i][j]); chmax(dp[i + 1][j + 1], dp[i][j] + x[i] + bonus[j + 1]); } } ll ans = 0; rep(j, 5500) { chmax(ans, dp[n][j]); } cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl; return 0; }  5500という値は僕が「nの上限が5000だから適当に5500でループすればええやろ」と思って書いた値です。 適宜、nやn+1に変えてもらえればより綺麗な解答になると思います。  余談 dpを書くとき、$dp[i][j] = \max(dp[i][j], \ldots)$という式を書かなければなりません。 しかし、少し冗長です。 そこで、僕はそれをシンプルに書けるchminとchmaxという関数をテンプレートとして持っています。 参考</description>
      <content>&lt;h2 id=&#34;問題文&#34;&gt;問題文&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc261/tasks/abc261_d&#34;&gt;問題のリンク&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;N回のコイントスを行って、表が出たらお金がもらえます。
しかし、表を出し続ければよいというわけではありません。
この問題を難しくしているのが、連続で表を出すことによるボーナスです。
なぜなら、例えば「2回連続表が出た場合」のボーナスがとても高い場合を考えます。
このとき、10回連続表を出すよりも、裏を出してリセットし、先ほどのボーナスを取り続けたほうが儲かるかもしれません。
コイントスを行って得たお金の最大値を求めるのがこの問題です。&lt;/p&gt;
&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;結論から言うと、解法はdp(動的計画法、Dynamic Programming)です。
dpの特徴は、「前の計算結果を利用して次の結果を出す」ことです。
dpについて知らない方は、&lt;a href=&#34;https://qiita.com/drken/items/dc53c683d6de8aeacf5a&#34;&gt;この記事&lt;/a&gt;を見ると分かりやすいかもしれないです。
dpを使うという判断の理由は、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前の計算からの結果が利用できそうである。&lt;/li&gt;
&lt;li&gt;最適な行動をした場合の最大値を求める問題である。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などです。&lt;/p&gt;
&lt;p&gt;さて、dpと言えば、考えるのはdpテーブルです。僕は以下のように定義しました。
$$
dp[i][j] = i番目のコイントスで、連続でj回表になっているとき、得られるお金の最大値。
$$
ただし、iは1-indexed。&lt;/p&gt;
&lt;p&gt;次に考えるべきは、初期値と漸化式です。僕は次のように設定しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初期値 $dp[0][0] = 0$&lt;/li&gt;
&lt;li&gt;表が出た場合 $dp[i+1][j+1] = \max(dp[i+1][j+1], dp[i][j] + X[i] + bonus[j+1])$&lt;/li&gt;
&lt;li&gt;裏が出た場合 $dp[i+1][0] = \max(dp[i+1][0], dp[i][j])$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただし、bonus[j]は、j回連続表が出た時のボーナス(ボーナスが出ない時は0)。&lt;/p&gt;
&lt;p&gt;答えは、次のように選べばよいです。
$$
ans = \max_{0 \le j \le n}(dp[n][j])
$$&lt;/p&gt;
&lt;p&gt;よって、$O(N^2)$でこの問題が解けました。
$1 \le n \le 5000$より、十分間に合います。&lt;/p&gt;
&lt;p&gt;僕が提出したコードは以下です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#75715e&#34;&gt;#define rep(i, n) for(int i=0; i &amp;lt; (n); i++)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; ll &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; chmax(T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; a, T b) { &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; b) { a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; } &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; }
&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; chmin(T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; a, T b) { &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; b) { a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; } &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; }

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, m;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m;

    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; x(n);
    rep(i, n) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x[i];

    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ll&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; dp(&lt;span style=&#34;color:#ae81ff&#34;&gt;5500&lt;/span&gt;, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ll&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5500&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));

    map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ll, ll&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; bonus;
    rep(i, m) {
        ll ci, yi;
        cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ci &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; yi;
        bonus[ci] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; yi;
    }

    dp[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    rep(i, n) {
        rep(j, &lt;span style=&#34;color:#ae81ff&#34;&gt;5500&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(dp[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
            chmax(dp[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], dp[i][j]);
            chmax(dp[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], dp[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; bonus[j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
        }
    }

    ll ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    rep(j, &lt;span style=&#34;color:#ae81ff&#34;&gt;5500&lt;/span&gt;) {
        chmax(ans, dp[n][j]);
    }

    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;5500という値は僕が「nの上限が5000だから適当に5500でループすればええやろ」と思って書いた値です。
適宜、nやn+1に変えてもらえればより綺麗な解答になると思います。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;余談&#34;&gt;余談&lt;/h2&gt;
&lt;p&gt;dpを書くとき、$dp[i][j] = \max(dp[i][j], \ldots)$という式を書かなければなりません。
しかし、少し冗長です。
そこで、僕はそれをシンプルに書けるchminとchmaxという関数をテンプレートとして持っています。
&lt;a href=&#34;https://qiita.com/drken/items/dc53c683d6de8aeacf5a&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;実装は以下です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; chmax(T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; a, T b) { &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; b) { a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; } &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; }
&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; chmin(T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; a, T b) { &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; b) { a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; } &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;知らなかった方はコピペして使ってみてはいかがでしょうか。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>ABC255 D</title>
      <link>/posts/tech/2022/6_25/abc255_d/</link>
      <pubDate>Sat, 25 Jun 2022 13:07:04 +0900</pubDate>
      
      <guid>/posts/tech/2022/6_25/abc255_d/</guid>
      <description>問題文 問題のリンク
要するに、数列が与えられて、数列の要素に1を足したり引いたりして、すべての要素をある値($X_i$)にする問題です。 今回はクエリが与えられるので、クエリ分の計算量を削減しなくてはなりません。
解法 愚直に解く方法は、すべての要素をループして$X_i$との差を計算する方法です。 クエリ処理に$O(Q)$、ループに$O(N)$かかるので、全体の計算量は$O(NQ)$となります。 しかし、$1 \leq N,Q \leq 2 \times 10^5$なので、間に合いません。
そこで、$X_i$に対して必要な操作の最小回数を、事前に計算しておく方法を考えます。
そもそも、差とはどのように計算されるのでしょうか。
例えば、$A, B \in \mathbb{R}$の差は$|A - B|$です。$A = 3, B = 2$のとき、差は$|A - B| = 1$となります。
では、ある一つの値と、複数の値との差の合計について考えてみましょう。 具体的には、数列$A = \lbrace 1,2,4,5 \rbrace$と実数$X_i = 3$との差を考えます。
先ほども言いましたが、$|1-3| + |2-3| + \ldots$と計算していては間に合いません。 そこで、$A_0$の時点、$A_1$の時点$\ldots$での和を先に計算しておきます。これを累積和と言います。 累積和の計算には計算量$O(N)$を要しますが、最初の一回だけ計算するので、余裕で間に合います。
数列Aの累積和をSとすると、$S = \lbrace 1, 1+2, 1+2+4, 1+2+4+5 \rbrace = \lbrace 1, 3, 7, 12 \rbrace$となります。 ここで、$X_i$と、$A$のそれぞれの要素との差を一気に計算する方法を考えてみましょう。
先ほどの愚直な計算式を思い浮かべると、$|1-3| + |2-3| + |4-3| + |5-3| = 6$となります。 ここで、もし絶対値が外れたらどうなるでしょうか。</description>
      <content>&lt;h2 id=&#34;問題文&#34;&gt;問題文&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc255/tasks/abc255_d&#34;&gt;問題のリンク&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;要するに、数列が与えられて、数列の要素に1を足したり引いたりして、すべての要素をある値($X_i$)にする問題です。
今回はクエリが与えられるので、クエリ分の計算量を削減しなくてはなりません。&lt;/p&gt;
&lt;h2 id=&#34;解法&#34;&gt;解法&lt;/h2&gt;
&lt;p&gt;愚直に解く方法は、すべての要素をループして$X_i$との差を計算する方法です。
クエリ処理に$O(Q)$、ループに$O(N)$かかるので、全体の計算量は$O(NQ)$となります。
しかし、$1 \leq N,Q \leq 2 \times 10^5$なので、間に合いません。&lt;/p&gt;
&lt;p&gt;そこで、$X_i$に対して必要な操作の最小回数を、事前に計算しておく方法を考えます。&lt;/p&gt;
&lt;p&gt;そもそも、差とはどのように計算されるのでしょうか。&lt;br&gt;
例えば、$A, B \in \mathbb{R}$の差は$|A - B|$です。$A = 3, B = 2$のとき、差は$|A - B| = 1$となります。&lt;/p&gt;
&lt;p&gt;では、ある一つの値と、複数の値との差の合計について考えてみましょう。
具体的には、数列$A = \lbrace 1,2,4,5 \rbrace$と実数$X_i = 3$との差を考えます。&lt;/p&gt;
&lt;p&gt;先ほども言いましたが、$|1-3| + |2-3| + \ldots$と計算していては間に合いません。
そこで、$A_0$の時点、$A_1$の時点$\ldots$での和を先に計算しておきます。これを累積和と言います。
累積和の計算には計算量$O(N)$を要しますが、最初の一回だけ計算するので、余裕で間に合います。&lt;/p&gt;
&lt;p&gt;数列Aの累積和をSとすると、$S = \lbrace 1, 1+2, 1+2+4, 1+2+4+5 \rbrace = \lbrace 1, 3, 7, 12 \rbrace$となります。
ここで、$X_i$と、$A$のそれぞれの要素との差を一気に計算する方法を考えてみましょう。&lt;/p&gt;
&lt;p&gt;先ほどの愚直な計算式を思い浮かべると、$|1-3| + |2-3| + |4-3| + |5-3| = 6$となります。
ここで、もし絶対値が外れたらどうなるでしょうか。&lt;/p&gt;
&lt;p&gt;$(3-1) + (3-2) + (4-3) + (5-3) = 6$ となりますね。ここで、計算量を減らすにはどうすれば良いでしょうか。&lt;/p&gt;
&lt;p&gt;3という数が多数登場するので、分配法則でくくることができます。そうすると式は、
$$
\lbrace 3 \times 2 - (1 + 2) \rbrace + \lbrace (4 + 5) - 3 \times 2 \rbrace = 6
$$
となります。
ここで、$1 + 2 = S_1, 4 + 5 = S_3 - S_2, 3=X_i$より、式は、
$$
(X_i \times 2 - S_1) + \lbrace (S_3 - S_2) - X_i \times 2 \rbrace
$$
となります。つまりどういうことでしょうか。&lt;/p&gt;
&lt;p&gt;先ほどの式は、大きく左半分と右半分に分かれます。つまり、Aにおいて$X_i$より小さい部分に関するものと、$X_i$以上の部分に関するものです。
なぜ左半分と右半分に分けなければいけないのか。なぜなら、絶対値を外しているので、$X_i$より小さい$A_i$との差は$X_i - A_i$、逆に$X_i$より大きい$A_i$との差は$A_i - X_1$となるからです。&lt;/p&gt;
&lt;p&gt;数列Aで、「どこから$A_i$が$X_i$以上になるか」を考えれば、左右別々に答えを一気に計算できるということです。&lt;/p&gt;
&lt;p&gt;しかし、「どこから$A_i$が$X_i$以上になるか」を計算するのにも、愚直にやれば$O(N)$かかってしまいます。すなわち、全体では$O(NQ)$かかってしまい、タイムオーバー。&lt;/p&gt;
&lt;p&gt;そこで、数列Aをソートして二分探索を行えば、$O(log{N})$で計算ができます。つまり、全体でも$O(Qlog{N})$で計算でき、余裕を持って間に合います。(厳密に言えばソートに$O(Nlog{N})$かかるので、全体では$O((N+Q)log{N})$です。)&lt;/p&gt;
&lt;p&gt;二分探索を初めて聞いた方は検索してみてください。おそらく一番簡単なアルゴリズムです。&lt;/p&gt;
&lt;p&gt;僕が提出したコードは以下です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#75715e&#34;&gt;#define rep(i, n) for(int i=0; i &amp;lt; (n); i++)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; ll &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;;
 
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
    ll n, q; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; q;
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ll&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a(n);
    rep(i, n) cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[i];
    sort(a.begin(), a.end());
 
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ll&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ps(n, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    rep(i, n) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
            ps[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[i];
        }
 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
            ps[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ps[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
        }
    }
 
    rep(i, q) {
        ll xi; cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; xi;
 
        ll lb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lower_bound(a.begin(), a.end(), xi) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; a.begin();
 
        ll ans;
 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(lb &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xi&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lb&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ps[lb&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (ps[n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ps[lb&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; xi &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; lb &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(lb &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; n) ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xi &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ps[n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ps[n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; xi;
 
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
  </channel>
</rss>
